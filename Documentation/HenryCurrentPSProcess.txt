I use PrimalForms CE to design the PS form.
	http://www.sapien.com/blog/2011/03/29/primalforms-ce-update/

I do NOT add any PS code to the controls, but I do set their properties: name, etc.

I save and then export the form.
	AScII_GUI.ps1

It creates the following type entries in the PS file:
	$frmAScIIGUI = New-Object System.Windows.Forms.Form
	$rdoNone.Name = "rdoNone"
	$lsvBulk.Columns.Add($System_Windows_Forms_ColumnHeader_111)|Out-Null
	$chkBulk.Text = "Bulk"
	$btnCreateSess_OnClick=

I create a seperate PS file for the actual code/functions.
	PS-AScII.ps1

It has the following basic format:
	function GetDomains{

	function lblSize_DoubleClick{
	function pgAction_MouseLeave{
	function btnCreateSess_OnClick{

	(Upon adding a control [i.e. a button] add the method(s) desired to this file [i.e. function btnTest_OnClick{}]


I created a PS script to compare the 2 files, 
	FixForm.ps1
looking for all the (control) functions in the code file 
	Where-Object {(($_ -like "*function *") -and ($_ -like "*{") -and ($_ -like "*_*"))}
	(i.e. "function btnCreateSess_OnClick{")

and seeing what the form file is missing.    (form file is read in as a stream, and wrote out as a stream)
If the control contain ":FromFile(", or the name starts "$img", it updates the image pathing.

When the end of the dynamic form code is reached,
	Watch for "#Show the Form"
then it adds any of the missing functions to the Form file, via the write stream.
	$chkBulk.Add_Click({chkBulk_Click});
	$frmAScIIGUI.Add_Shown({frmAScIIGUI_Shown});
	$txbNumCLINs.Add_TextChanged({txbNumCLINs_TextChanged});

Make sure the code file has an "include" of the form file and that is it.
	". ($MyInvocation.MyCommand.Path + "\AScII_GUI.ps1");"

The form code has a "show form" call at the end of it that is automatically added.
	$frmAScIIGUI.ShowDialog()| Out-Null


