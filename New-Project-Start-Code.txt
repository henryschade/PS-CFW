#Requires -Version 2.0
###########################################
# Updated Date:	6 November 2015
# Purpose:		Provide a PowerShell GUI for _______ Process.
# Requirements: PS-CFW
###########################################

	$strProjName = "WILE";
	$strVer = "beta 0.1";
	$strCodeFile = $strProjName + ".ps1";
	$strGUIFile = $strProjName + "_GUI\MainWindow.xaml";
	$strLogFile = $strProjName + ".log";
	$strLogDirS = "\\nawesdnifs08.nadsuswe.nads.navy.mil\NMCIISF\NMCIISF-SDCP-HELPDESK\ITSS-Tools\Logs\";
	$strLogDirL = "C:\ITSS-Tools\Logs\";

	$ScriptDir = Split-Path $MyInvocation.MyCommand.Path;

	#Make sure the log directories exist.
	if (!(Test-Path -Path $strLogDirL)){
		#Need to create the directory
		#PS mkdir, will create any parent folders needed.
		$strResults = mkdir $strLogDirL;
	}
	if (!(Test-Path -Path $strLogDirS)){
		#Need to create the directory
		if ((Test-Path -Path ("\\" + $strLogDirS.Split("\")[2] + "\" + $strLogDirS.Split("\")[3]))){
			#PS mkdir, will create any parent folders needed.
			$strResults = mkdir $strLogDirS;
		}
	}

	#Set local logging if no network path
	if (!(Test-Path -Path $strLogDirS)){
		$strLogDirS = $strLogDirL;
	}

	#WriteLogFile() is a function to Do Log File Writes.
	#It Must be defined before we can use it.
	. ($ScriptDir + "\..\PS-CFW\" + "Common.ps1")
	$strMessage = "Starting " + $strProjName + ".  --  PS ver: " + $PSVersionTable.PSVersion.ToString() + " ($env:Processor_Architecture bit)  --  .NET ver: " + $PSVersionTable.CLRVersion.ToString() + ".";
	Write-Host $strMessage;
	WriteLogFile $strMessage $strLogDirS $strLogFile;

	#Include following Scripts/Files/modules.
	$arrIncludes = @("FileOperations.ps1", "AD-Routines.ps1", "Common.ps1", "DB-Routines.ps1", "Display.ps1", "Exchange.ps1", "Forms.ps1", "Jobs.ps1");
	foreach ($strInclude in $arrIncludes){
		$Error.Clear();
		. ($ScriptDir + "\..\PS-CFW\" + $strInclude)
		if ($Error){WriteLogFile "------- Error 'loading' '$strInclude.ps1'.`r`n$Error" $strLogDirS $strLogFile; $Error.Clear();}
	}

	#Ensure .NET 4.x support is "turned on".
	$bResults = EnableDotNet4;
	if ($bResults){
		$strCommand = "& '" + $MyInvocation.MyCommand.Path + "'";

		$strMessage = "The PowerShell config files for .NET 4.x support should have been created, so restarting.";
		WriteLogFile $strMessage $strLogDirS $strLogFile;

		Write-Host $strMessage -foregroundcolor Green -background blue;
		Write-Host "Press any key to continue ..." -foregroundcolor red;
		$x = $host.UI.RawUI.ReadKey("NoEcho, IncludeKeyDown");

		Start-Process ($PSHOME + "\powershell.exe") -ArgumentList "-ExecutionPolicy ByPass -Command $strCommand";
		#Start-Process ($PSHOME + "\powershell.exe") -ArgumentList "-STA -ExecutionPolicy ByPass -Command $strCommand";
		exit;

		#http://powershell.com/cs/blogs/tobias/archive/2012/05/09/managing-child-processes.aspx
		$objProcess = (Get-WmiObject -Class Win32_Process -Filter "ParentProcessID=$PID").ProcessID;
		Stop-Process -Id $PID;
	}

	[ConsoleHelper]::HideConsole();									#Hide the PowerShell Console.
	$objTimer = $null;

	# ---=== Start Add project code functions here ===---
	function btnGetValidated_Click{
	  #Code for the Button Click event
	}

	function btnSubmit_Click{
		#Code for the Button Click event

	}
	# ---=== End Add project code functions here ===---

	# ---=== Start Code to do Just before show GUI. ===---
	$bolAsAdmin = $False;
	#If running as admin is irrelevant then comment out the next 26 lines.
	$strMessage = "Checking if running as Admin.";
	Write-Host $strMessage;
	WriteLogFile $strMessage $strLogDirS $strLogFile;
	$bolAsAdmin = AsAdmin;
	$strResponse = "yes";
	if ($bolAsAdmin -ne $True){
		$strResponse = MsgBox "You should run this PS Script with admin permissions.`r`n`r`nWant us to restart this PS Script for you?" "Not running with Admin perms" 4;

		if ($strResponse -eq "yes"){
			$strCommand = "& '" + $MyInvocation.MyCommand.Path + "'";

			$strMessage = "Restarting as Admin.";
			WriteLogFile $strMessage $strLogDirL $strLogFile;

			#method 1.  Uses Windows UAC to get creds.
			Start-Process ($PSHOME + "\powershell.exe") -verb runas -ArgumentList "-ExecutionPolicy ByPass -Command $strCommand";
			#Start-Process ($PSHOME + "\powershell.exe") -verb runas -ArgumentList "-STA -ExecutionPolicy ByPass -Command $strCommand";
			exit;

			#http://powershell.com/cs/blogs/tobias/archive/2012/05/09/managing-child-processes.aspx
			$objProcess = (Get-WmiObject -Class Win32_Process -Filter "ParentProcessID=$PID").ProcessID;
			Stop-Process -Id $PID;
		}else{
			$bolAsAdmin = $True;
		}
	}

	#Change the next lines $True/$False depending on the desired action for running as Admin.
	if ($bolAsAdmin -eq $True){
		$strMessage = "You should not run this as Admin.";
		WriteLogFile $strMessage $strLogDirS $strLogFile;
	}
	else{
		if ((Test-Path -Path ($ScriptDir + "\" + $strGUIFile))){
			#GUI File Exists
			$strMessage = "Starting Load of GUI.";
			Write-Host $strMessage;
			WriteLogFile $strMessage $strLogDirS $strLogFile;

			$objRet = GetXAMLGUI ($ScriptDir + "\" + $strGUIFile) ($ScriptDir + "\" + $strCodeFile);
			WriteLogFile ($objRet.Name) $strLogDirS $strLogFile;
			if (($objRet.Message -Match "Failed to add") -or ($objRet.Message -Match "Error adding") -or ($objRet.Message -Match "Error")){
				#MsgBox $objRet.Message;
				$strMessage = "Problems reading xaml GUI --> " + ($objRet.Message);
				WriteLogFile $strMessage $strLogDirS $strLogFile;
			}

			if ($objRet.Results -eq $True){
				$strMessage = "Loading XAML GUI.";
				Write-Host $strMessage;
				WriteLogFile $strMessage $strLogDirS $strLogFile;

				Write-Host $objRet.Message;
				$strResult = $objRet.Returns.ShowDialog();
			}
			else{
				$strMessage = "Failed to load GUI." + "`r`n" + "'" + $ScriptDir + "\" + $strGUIFile + "'" + "`r`n`r`n" + $objRet.Message;
				Write-Host $strMessage;
				WriteLogFile $strMessage $strLogDirS $strLogFile;
			}

		}
		else{
			$strMessage = "GUI Interface file not found." + "`r`n" + "(" + $ScriptDir + "\" + $strGUIFile + ")";
			WriteLogFile $strMessage $strLogDirS $strLogFile;
			MsgBox $strMessage;
		}
	}
	# ---=== GUI has been shut down, or error trying to show it. ===---

	#Do clean up.
	[ConsoleHelper]::ShowConsole();				#To show the PowerShell Console.
